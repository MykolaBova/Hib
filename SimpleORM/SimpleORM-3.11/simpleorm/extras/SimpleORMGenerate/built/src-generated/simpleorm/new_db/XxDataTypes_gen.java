package simpleorm.new_db;
import simpleorm.dataset.*;
import simpleorm.utils.*;
import simpleorm.sessionjdbc.SSessionJdbc;
import java.math.BigDecimal;
import java.util.Date;

/**	Base class of table XX_DATA_TYPES.<br>
*Do not edit as will be regenerated by running SimpleORMGenerator
*Generated on Wed Dec 10 14:47:40 EST 2008
***/
abstract class XxDataTypes_gen extends SRecordInstance implements java.io.Serializable {

   public static final SRecordMeta <XxDataTypes> meta = new SRecordMeta<XxDataTypes>(XxDataTypes.class, "XX_DATA_TYPES");

//Columns in table
   public static final SFieldString fldDataId =
      new SFieldString(meta, "DATA_ID", 20,
         new SFieldFlags[] { SFieldFlags.SPRIMARY_KEY, SFieldFlags.SMANDATORY });

   public static final SFieldString fldName =
      new SFieldString(meta, "NAME", 20);

   public static final SFieldString fldEmptystr =
      new SFieldString(meta, "EMPTYSTR", 20);

   public static final SFieldInteger fldAnint =
      new SFieldInteger(meta, "ANINT");

   public static final SFieldLong fldAlong =
      new SFieldLong(meta, "ALONG");

   public static final SFieldTimestamp fldTstamp =
      new SFieldTimestamp(meta, "TSTAMP");

   public static final SFieldDate fldAdate =
      new SFieldDate(meta, "ADATE");

   public static final Time fldAtime =
      new Time(meta, "ATIME");

   public static final SFieldTimestamp fldTstampObj =
      new SFieldTimestamp(meta, "TSTAMP_OBJ");

   public static final SFieldBigDecimal fldAdecimal =
      new SFieldBigDecimal(meta, "ADECIMAL", 22, 4);

   public static final Binary fldAbytes =
      new Binary(meta, "ABYTES");

   public static final SFieldString fldYnbool =
      new SFieldString(meta, "YNBOOL", 2147483647);

//Column getters and setters
   public String get_fldDataId(){ return getString(fldDataId);}
   public void set_fldDataId( String value){setString( fldDataId,value);}

   public String get_fldName(){ return getString(fldName);}
   public void set_fldName( String value){setString( fldName,value);}

   public String get_fldEmptystr(){ return getString(fldEmptystr);}
   public void set_fldEmptystr( String value){setString( fldEmptystr,value);}

   public int get_fldAnint(){ return getInt(fldAnint);}
   public void set_fldAnint( int value){setInt( fldAnint,value);}

   public long get_fldAlong(){ return getLong(fldAlong);}
   public void set_fldAlong( long value){setLong( fldAlong,value);}

   public Date get_fldTstamp(){ return getDate(fldTstamp);}
   public void set_fldTstamp( Date value){setDate( fldTstamp,value);}

   public Date get_fldAdate(){ return getDate(fldAdate);}
   public void set_fldAdate( Date value){setDate( fldAdate,value);}

   public  {Code not implemented Time} get_fldAtime(){ return get {Code not implemented Time}(fldAtime);}
   public void set_fldAtime(  {Code not implemented Time} value){set {Code not implemented Time}( fldAtime,value);}

   public Date get_fldTstampObj(){ return getDate(fldTstampObj);}
   public void set_fldTstampObj( Date value){setDate( fldTstampObj,value);}

   public BigDecimal get_fldAdecimal(){ return getBigDecimal(fldAdecimal);}
   public void set_fldAdecimal( BigDecimal value){setBigDecimal( fldAdecimal,value);}

   public  {Code not implemented Binary} get_fldAbytes(){ return get {Code not implemented Binary}(fldAbytes);}
   public void set_fldAbytes(  {Code not implemented Binary} value){set {Code not implemented Binary}( fldAbytes,value);}

   public String get_fldYnbool(){ return getString(fldYnbool);}
   public void set_fldYnbool( String value){setString( fldYnbool,value);}

//Find and create
   public static XxDataTypes findOrCreate( SSessionJdbc ses ,String _fldDataId ){
      return ses.findOrCreate(meta, new Object[] {_fldDataId});
   }
//specializes abstract method
   public SRecordMeta getMeta() {
       return meta;
   }
}
