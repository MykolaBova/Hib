package com.dclonline.db;

import java.util.ArrayList;

import javax.sql.DataSource;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;

public class Mapper {

	/**
	 * A Generic function that performs query on database table. Any Domain
	 * Object Class that implements TableDefinition interface can be used as input. The
	 * output will be a List encapsulating input Domain Object. This will help
	 * reuse this code for most of Domain Objects which are basically Tables on
	 * a RDBMS system. This technique should relieve a developer from creating
	 * one to one mapping between Table Fields and a Object's property
	 * variables. Care should be taken to properly name a Object's member
	 * variables to an DBMS Table's column name.
	 * 
	 * This function takes a DataSource, a domain object and an SQL string and
	 * returns rows. Each row is a domain object instance. Apache Commons
	 * DBUtils package is being used for JDBC access.
	 * 
	 * @param type
	 *            Domain Object passed as Class. Domain Object maps to a
	 *            Database Table
	 * @param sql
	 *            SQL string
	 * @see TableDefinition
	 * @return ArrayList of Domain Object
	 * @throws Exception
	 * @throws Exception
	 *             Exception will be thrown if Query doesn't go through
	 */
	public ArrayList fetchData(DataSource ds,
			Class<? extends TableDefinition> claz, String sql) throws Exception {
		
		if (ds == null || claz.getSuperclass().getName().isEmpty()
				|| sql.isEmpty()) {
			throw new java.lang.NullPointerException();
		}
		
		ArrayList result = null;

		QueryRunner run = new QueryRunner(ds);

		// Use the BeanListHandler implementation to convert all
		// ResultSet rows into a List of JavaBeans.

		ResultSetHandler h = new BeanListHandler(claz);

		// Execute the SQL statement and return the results in a List of
		// objects generated by the BeanListHandler.
		result = run.query(sql, h);

		return result;
	}

}
