<HTML>
	<HEAD>
		<TITLE>Prevayler</TITLE>
		<LINK rel="icon" href="favicon.ico" type="image/x-icon" />
		<STYLE type="text/css">
			BODY { background-color: rgb(249,249,249); font-family: Arial, sans-serif; }
			DIV { font-size: 18px; margin-bottom:12px; font-weight:bold; }
			P { font-size: 16px; }
			P, PRE { width: 628px; text-align: left; margin-top:7px; margin-bottom:7px; }
			TD { vertical-align:top; padding:31px; }
		</STYLE>
		<LINK href="prettify.css" type="text/css" rel="stylesheet" /> 
		<SCRIPT type="text/javascript" src="prettify.js"></SCRIPT>
		<SCRIPT>
			function onLoad(){
				var elements = document.body.getElementsByTagName("*");
				for(var i=0, max=elements.length; i<max; i++){
					var elem = elements[i];
					if (elem.tagName == "PRE" && "outerHTML" in elem){
						elem.outerHTML = "<PRE class='prettyprint'>" + elem.innerHTML + "</PRE>";
					}
				}
			}
		</SCRIPT>
	</HEAD>
	<BODY onload="prettyPrint();onLoad();">
		<CENTER>
			<H1><IMG alt="Prevayler" src="prevayler.png"></H1>
			<DIV>What is Prevayler?</DIV>
			<P>Prevayler is an open source object persistence library for Java. It is an implementation of the Prevalent System design pattern, in which business objects are kept live in memory and transactions are journaled for system recovery. <B><I>Prevayler is the simplest and fastest way to provide ACID persistence for your "plain old Java objects".</I></B></P>
			<TABLE>
				<TR>
					<TD style="text-align:right">
						<DIV style="font-size:16px"><A href="old_wiki/Welcome.html">Learn more</A></DIV>
						<DIV><A href="http://www.ddj.com/architect/184415149?pgno=14"><IMG alt="Jolt Productivity Award" src="jolt_productivity_award.gif" border="0"></A></DIV>
						<DIV>Version 2.6 was released on 2013-01-15</DIV>
						<DIV><A href="http://repo1.maven.org/maven2/org/prevayler/prevayler-core/2.6/">Download Prevayler</A></DIV>
						<DIV><A href="http://search.maven.org/#artifactdetails%7Corg.prevayler%7Cprevayler-core%7C2.6%7Cpom">Prevayler on Maven Central</A></DIV>
						<DIV><A href="http://github.com/jsampson/prevayler/tree/master/demos/prevayler-maven-archetype">Need help setting up a Maven project?</A></DIV>
						<DIV><A href="apidocs/2.6/org/prevayler/package-summary.html">Browse the API documentation</A></DIV>
						<DIV><A href="http://github.com/jsampson/prevayler/tree/master">Explore our Git repository</A></DIV>
						<DIV><A href="https://lists.sourceforge.net/lists/listinfo/prevayler-discussion">Join our discussion mailing list</A></DIV>						
					</TD>
					<TD>
						<DIV style="text-align:left">Prevayler Usage</DIV>
						<P>To persist an instance of<P>		
<PRE class="prettyprint">
class MyData implements Serializable{
	//...
}
</PRE>
						<P>create a Prevayler for it:</P>
<PRE class="prettyprint">
Prevayler&lt;MyData&gt; prevayler = PrevaylerFactory.createPrevayler(new MyData());
</PRE>
						<P>and ensure any changes to it are made via the local variable in Transactions:</P>

<PRE class="prettyprint">
class MyChange implements org.prevayler.Transaction&lt;MyData&gt;{
	public void executeOn(MyData myData, Date date){
		//make any changes via "myData" here
	}
}
</PRE>
<PRE class="prettyprint">
//execute a "MyChange":
prevayler.execute(new MyChange());
</PRE>

						<P>You can pass arguments into a Transaction:</P>

<PRE class="prettyprint">
//execute a "MyChange"
prevayler.execute(new MyChange(new MyArgument()));
</PRE>

						<P>via one or more instance variables in your Transaction:</P>

<PRE class="prettyprint">
class MyChange implements Transaction&lt;MyData&gt;{
	
	MyArgument myArgument;
	
	public MyChange(MyArgument myArgument){
		this.myArgument = myArgument;
	}

	public void executeOn(MyData myData, Date date){
		//You can use "myArgument" here, but upon
		//recovery execution it'll be a freshly
		//deserialized copy, so it won't reference
		//anything in "myData"
	}
}
</PRE>

						<P>To perform a Transaction with a query, implement TransactionWithQuery and set the second type parameter to your desired return type:</P>

<PRE class="prettyprint">
class MyChangeAndQuery implements TransactionWithQuery&lt;MyData, MyReturnType&gt;{
	public MyReturnType executeAndQuery(MyData myData, Date date){
		MyReturnType queryResult;
		//...
		return queryResult;
	}
}
</PRE>

<PRE class="prettyprint">
//perform a "MyChangeAndQuery" and get the result
MyReturnType queryResult = prevayler.execute(new MyChangeAndQuery());
</PRE>

						<P>You can also perform a straightforward Query (which won't write any transaction to disk) or a SureTransactionWithQuery (which doesn't throw Exception). </P>

						<P>You may want to write a snapshot of your persistent object to disk from time to time, to shorten recovery time upon system restart:</P>

<PRE class="prettyprint">
prevayler.takeSnapshot();
</PRE>

					</TD>
				</TR>
			</TABLE>
		</CENTER>
	</BODY>
</HTML>