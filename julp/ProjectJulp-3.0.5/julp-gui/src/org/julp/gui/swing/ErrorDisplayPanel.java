package org.julp.gui.swing;

import java.awt.event.KeyEvent;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.InvocationTargetException;

public class ErrorDisplayPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = -4863019370666594890L;
    protected String message;
    protected Throwable throwable;
    protected String separator;
    protected int offset = -1;
    protected boolean preserveWhiteSpace;

    public ErrorDisplayPanel() {
        initComponents();
        setTabPaneMnemonic();
        init();
    }

    public ErrorDisplayPanel(String message, Throwable throwable, String separator, int offset, boolean preserveWhiteSpace) {
        this.message = message;
        this.throwable = throwable;
        this.separator = separator;
        this.offset = offset;
        this.preserveWhiteSpace = preserveWhiteSpace;
        initComponents();
        setTabPaneMnemonic();
        init();
    }

    public ErrorDisplayPanel(String message, Throwable throwable, String separator, int offset) {
        this.message = message;
        this.throwable = throwable;
        this.separator = separator;
        this.offset = offset;
        initComponents();
        setTabPaneMnemonic();
        init();
    }

    public ErrorDisplayPanel(String message, Throwable throwable) {
        this.message = message;
        this.throwable = throwable;
        initComponents();
        setTabPaneMnemonic();
        init();
    }

    protected void setDeafaultSeparator() {
        try {
            separator = System.getProperty("line.separator");
        } catch (SecurityException se) {
            separator = "\n"; //??
        }
    }

    private void setTabPaneMnemonic() {
        errorDisplayTabbedPane.setMnemonicAt(0, KeyEvent.VK_E);
        errorDisplayTabbedPane.setMnemonicAt(1, KeyEvent.VK_D);
    }

    /** must call this method */
    private void init() {
        errorMsgTextArea.setWrapStyleWord(true);
        errorMsgTextArea.setLineWrap(true);
        if (message == null || message.trim().length() == 0) {
            throwable = getCause(throwable);
            if (throwable != null) {                               
                if (message == null) {
                    message = throwable.getMessage();
                }
            }
            if (message == null) {
                message = "An Error Has Occurred";
            }
        }

        // If offset is unmodified then assume no breaking message.
        if (offset <= 0) {
            errorMsgTextArea.setText(message);
        } else {
            errorMsgTextArea.setText(splitMessage());
        }

        // details
        if (throwable != null) {
            StringWriter writer = new StringWriter();
            throwable.printStackTrace(new PrintWriter(writer));
            String details = writer.toString();
            errorDetailsTextPane.setText(details);
            errorDetailsTextPane.setCaretPosition(0);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        errorDisplayTabbedPane = new javax.swing.JTabbedPane();
        errorPanel = new javax.swing.JPanel();
        errorMsgScrollPane = new javax.swing.JScrollPane();
        errorMsgTextArea = new javax.swing.JTextArea();
        errorDetailsPanel = new javax.swing.JPanel();
        errorDetailsScrollPane = new javax.swing.JScrollPane();
        errorDetailsTextPane = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        setMinimumSize(new java.awt.Dimension(100, 70));
        setPreferredSize(new java.awt.Dimension(300, 150));
        errorPanel.setLayout(new java.awt.BorderLayout());

        errorMsgScrollPane.setBorder(null);
        errorMsgTextArea.setBackground(new java.awt.Color(238, 238, 238));
        errorMsgScrollPane.setViewportView(errorMsgTextArea);

        errorPanel.add(errorMsgScrollPane, java.awt.BorderLayout.CENTER);

        errorDisplayTabbedPane.addTab("Error Message", errorPanel);

        errorDetailsPanel.setLayout(new java.awt.BorderLayout());

        errorDetailsScrollPane.setBorder(null);
        errorDetailsTextPane.setEditable(false);
        errorDetailsTextPane.setOpaque(false);
        errorDetailsScrollPane.setViewportView(errorDetailsTextPane);

        errorDetailsPanel.add(errorDetailsScrollPane, java.awt.BorderLayout.CENTER);

        errorDisplayTabbedPane.addTab("Details", errorDetailsPanel);

        add(errorDisplayTabbedPane, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPanel errorDetailsPanel;
    private javax.swing.JScrollPane errorDetailsScrollPane;
    private javax.swing.JTextPane errorDetailsTextPane;
    protected javax.swing.JTabbedPane errorDisplayTabbedPane;
    private javax.swing.JScrollPane errorMsgScrollPane;
    private javax.swing.JTextArea errorMsgTextArea;
    protected javax.swing.JPanel errorPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Breaking long String to lines.
     * Line does not break words, only white space
     * Lines could be separated with System.getProperty(\"line.separator\") - default
     * or \"<br>\" or any given String.
     *
     */
    protected String splitMessage() {
        StringBuilder sb = new StringBuilder();
        String[] temp = message.split(" ");
        String line = "";
        if (separator == null || separator.trim().length() == 0) {
            setDeafaultSeparator();
        }
        for (int i = 0; i < temp.length; i++) {
            if (preserveWhiteSpace) {
                line = line + temp[i] + " ";
            } else {
                line = line + temp[i].trim();
                if (!temp[i].equals("")) {
                    line = line + " ";
                }
            }
            if (line.length() >= offset) {
                sb.append(line).append(separator);
                line = "";
            }
            if (i == temp.length - 1) { // last line
                if (line.length() < offset) {
                    sb.append(line);
                }
            }
        }
        return sb.toString();
    }

    public Throwable getCause(Throwable throwable) {
        if (throwable == null) {
            return null;
        }
        if (throwable instanceof InvocationTargetException) {
            throwable = ((InvocationTargetException) throwable).getTargetException();
        }
        Throwable parent = throwable;
        Throwable cause = throwable.getCause();
        do {
            if (cause != null) {
                parent = cause;
                cause = parent.getCause();
            }
        } while (cause != null);

        return parent;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public Throwable getThrowable() {
        return throwable;
    }

    public void setThrowable(Throwable throwable) {
        this.throwable = throwable;
    }

    public String getSeparator() {
        return separator;
    }

    public void setSeparator(String separator) {
        this.separator = separator;
    }

    public int getOffset() {
        return offset;
    }

    public void setOffset(int offset) {
        this.offset = offset;
    }

    public boolean isPreserveWhiteSpace() {
        return preserveWhiteSpace;
    }

    public void setPreserveWhiteSpace(boolean preserveWhiteSpace) {
        this.preserveWhiteSpace = preserveWhiteSpace;
    }
}
