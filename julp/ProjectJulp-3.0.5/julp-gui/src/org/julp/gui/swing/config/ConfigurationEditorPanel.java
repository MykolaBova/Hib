package org.julp.gui.swing.config;

import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.julp.gui.swing.ErrorDisplayPanel;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.Attr;
import org.w3c.dom.NodeList;
import org.w3c.dom.ls.DOMImplementationLS;
import org.w3c.dom.ls.LSOutput;
import org.w3c.dom.ls.LSSerializer;

public class ConfigurationEditorPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = -6207553326095161273L;

    public ConfigurationEditorPanel() {
        initComponents();
        if (!showFilePanel) {
            filePanel.setVisible(false);
        }
    }

    public ConfigurationEditorPanel(boolean showFilePanel) {
        this.showFilePanel = showFilePanel;
        initComponents();
        if (!showFilePanel) {
            filePanel.setVisible(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The node of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        editorComboBox = new javax.swing.JComboBox();
        filePanel = new javax.swing.JPanel();
        fileLocationButton = new javax.swing.JButton();
        fileLocationTextField = new javax.swing.JTextField();
        loadFileButton = new javax.swing.JButton();
        splitPane = new javax.swing.JSplitPane();
        scrollPane = new javax.swing.JScrollPane();
        configTree = new javax.swing.JTree();
        rightPanel = new javax.swing.JPanel();
        editorPanel = new javax.swing.JPanel();
        editorTextField = new javax.swing.JTextField();
        helpTextPane = new javax.swing.JTextPane();
        southPanel = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        editorComboBox.setEnabled(false);
        editorComboBox.setMaximumSize(new java.awt.Dimension(32767, 30));
        editorComboBox.setMinimumSize(new java.awt.Dimension(150, 15));
        editorComboBox.setPreferredSize(new java.awt.Dimension(400, 20));
        editorComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                editorComboBoxItemStateChanged(evt);
            }
        });

        setLayout(new java.awt.BorderLayout());

        filePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        filePanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 5, 1, 1)));
        fileLocationButton.setMnemonic('f');
        fileLocationButton.setText("File");
        fileLocationButton.setToolTipText("Locate File");
        fileLocationButton.setMaximumSize(new java.awt.Dimension(100, 25));
        fileLocationButton.setMinimumSize(new java.awt.Dimension(65, 15));
        fileLocationButton.setPreferredSize(new java.awt.Dimension(70, 20));
        fileLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileLocationButtonActionPerformed(evt);
            }
        });

        filePanel.add(fileLocationButton);

        fileLocationTextField.setToolTipText("Config file location");
        fileLocationTextField.setMaximumSize(new java.awt.Dimension(800, 25));
        fileLocationTextField.setMinimumSize(new java.awt.Dimension(65, 15));
        fileLocationTextField.setPreferredSize(new java.awt.Dimension(400, 20));
        fileLocationTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fileLocationTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fileLocationTextFieldFocusLost(evt);
            }
        });

        filePanel.add(fileLocationTextField);

        loadFileButton.setIcon(new javax.swing.ImageIcon(""));
        loadFileButton.setMnemonic('l');
        loadFileButton.setText("Load");
        loadFileButton.setToolTipText("Load File");
        loadFileButton.setMaximumSize(new java.awt.Dimension(100, 25));
        loadFileButton.setMinimumSize(new java.awt.Dimension(65, 15));
        loadFileButton.setPreferredSize(new java.awt.Dimension(70, 20));
        loadFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileButtonActionPerformed(evt);
            }
        });

        filePanel.add(loadFileButton);

        add(filePanel, java.awt.BorderLayout.NORTH);

        splitPane.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10)));
        splitPane.setDividerLocation(250);
        splitPane.setAutoscrolls(true);
        splitPane.setContinuousLayout(true);
        splitPane.setMinimumSize(new java.awt.Dimension(180, 40));
        splitPane.setOneTouchExpandable(true);
        splitPane.setPreferredSize(new java.awt.Dimension(500, 380));
        configTree.setModel(getInitTreeModel());
        configTree.setShowsRootHandles(true);
        configTree.setToggleClickCount(1);
        configTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                configTreeValueChanged(evt);
            }
        });

        scrollPane.setViewportView(configTree);

        splitPane.setLeftComponent(scrollPane);

        rightPanel.setLayout(new java.awt.GridLayout(1, 0));

        editorPanel.setLayout(new java.awt.BorderLayout(10, 5));

        editorTextField.setEnabled(false);
        editorTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editorTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                editorTextFieldFocusLost(evt);
            }
        });

        editorPanel.add(editorTextField, java.awt.BorderLayout.NORTH);

        helpTextPane.setBorder(new javax.swing.border.EtchedBorder());
        helpTextPane.setEditable(false);
        editorPanel.add(helpTextPane, java.awt.BorderLayout.CENTER);

        rightPanel.add(editorPanel);

        splitPane.setRightComponent(rightPanel);

        add(splitPane, java.awt.BorderLayout.CENTER);

        southPanel.setLayout(new java.awt.BorderLayout());

        southPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 5, 10, 5)));
        statusPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        statusPanel.add(statusLabel);

        southPanel.add(statusPanel, java.awt.BorderLayout.WEST);

        saveButton.setMnemonic('s');
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(saveButton);

        exitButton.setMnemonic('c');
        exitButton.setText("Close");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(exitButton);

        southPanel.add(buttonPanel, java.awt.BorderLayout.EAST);

        add(southPanel, java.awt.BorderLayout.SOUTH);

    }
    // </editor-fold>//GEN-END:initComponents

    private void editorComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_editorComboBoxItemStateChanged
        //System.out.println(" =========== editorComboBoxItemStateChanged: " + evt);
        //System.out.println(" =========== editorComboBoxItemStateChanged 1 comboBoxAction: " + comboBoxAction + " loading: " + loading);
        if (comboBoxAction && !loading) {
            //System.out.println(" =========== editorComboBoxItemStateChanged 2 comboBoxAction: " + comboBoxAction + " loading: " + loading);
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                Object value = editorComboBox.getSelectedItem();
                TreePath tp = configTree.getSelectionPath();
                if (tp != null) {
                    DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) tp.getLastPathComponent();
                    NodeWrapper wrapper = (NodeWrapper) treeNode.getUserObject();
                    Node node = wrapper.getNode(); // TEXT or CDATA
                    DefaultMutableTreeNode parentTreeNode = (DefaultMutableTreeNode) treeNode.getParent();
                    NodeWrapper parentWrapper = (NodeWrapper) parentTreeNode.getUserObject();
                    Node parentNode = parentWrapper.getNode();
                    Element element = null;
                    if (parentNode instanceof Element) {
                        element = (Element) parentNode;
                    }
                    if (value == null) {
                        Attr attributeDefault = element.getAttributeNode(ATTRIB_DEFAULT_VALUE);
                        if (attributeDefault != null) {
                            value = attributeDefault.getValue();
                        }
                    }
                    Attr attributeDatatype = element.getAttributeNode(ATTRIB_DATATYPE);
                    if (attributeDatatype != null) {
                        String datatype = attributeDatatype.getValue();
                        if (validateDatatype(datatype, (String) value)) {
                            node.setTextContent((String) value);
                            wrapper.setNode(node);
                            wrapper.setDisplay((String) value);
                            treeNode.setUserObject(wrapper);
                            ((DefaultTreeModel) configTree.getModel()).reload(treeNode);
                        }
                    } else {
                        node.setTextContent((String) value);
                        wrapper.setNode(node);
                        wrapper.setDisplay((String) value);
                        treeNode.setUserObject(wrapper);
                        ((DefaultTreeModel) configTree.getModel()).reload(treeNode);
                    }
                    if (!origValue.equals(editorComboBox.getSelectedItem() == null ? "" : editorComboBox.getSelectedItem().toString().trim())) {
                        statusLabel.setText("Document modified");
                    }
                }
            }
        }
    }//GEN-LAST:event_editorComboBoxItemStateChanged

    private void editorTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editorTextFieldFocusGained
        if (evt.isTemporary()) {
            return;
        }
        origValue = editorTextField.getText();
    }//GEN-LAST:event_editorTextFieldFocusGained

    private void loadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileButtonActionPerformed
        loadTree();
        reset();
    }//GEN-LAST:event_loadFileButtonActionPerformed

    private void fileLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileLocationButtonActionPerformed
        File file = null;
        JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new XMLFileChooserFilter());
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            path = file.getAbsolutePath().trim();
            if (!path.toLowerCase().endsWith(".xml")) {
                path = null;
                ErrorDisplayPanel errorPanel = new ErrorDisplayPanel("This is not XML file", null);
                //errorPanel.init();
                JOptionPane.showMessageDialog(messageParent, errorPanel, "Select File", JOptionPane.ERROR_MESSAGE);
            }
        }
        fileLocationTextField.setText(path);
    }//GEN-LAST:event_fileLocationButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        int ret = exit();
        if (ret < 2) {
            if (exitListeners == null) {
                return;
            }
            Iterator iter = exitListeners.iterator();
            while (iter.hasNext()) {
                ((ActionListener) iter.next()).actionPerformed(evt);
            }
        }
    }//GEN-LAST:event_exitButtonActionPerformed

    private void configTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_configTreeValueChanged
        TreePath tp = evt.getPath();
        reset();
        if (!comboBoxAction) {
            DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) tp.getLastPathComponent();
            Object userObject = treeNode.getUserObject();
            if (userObject instanceof NodeWrapper) {
                NodeWrapper wrapper = (NodeWrapper) userObject;
                NodeWrapper parentWrapper = null;
                DefaultMutableTreeNode parentTreeNode;
                Object obj = treeNode.getParent();
                if (obj != null) {
                    parentTreeNode = (DefaultMutableTreeNode) obj;
                    userObject = ((DefaultMutableTreeNode) parentTreeNode).getUserObject();
                    parentWrapper = (NodeWrapper) userObject;
                    Node parentNode = parentWrapper.getNode();
                    if (wrapper.getNode().getNodeType() == Node.TEXT_NODE || wrapper.getNode().getNodeType() == Node.CDATA_SECTION_NODE) {
                        String[] values = null;
                        if (parentNode instanceof Element) {
                            Element parentElement = (Element) parentNode;
                            Attr valuesAttribute = parentElement.getAttributeNode(ATTRIB_VALUES);
                            String attributeValue = null;
                            if (valuesAttribute != null) {
                                attributeValue = valuesAttribute.getValue();
                            }
                            if (attributeValue != null && attributeValue.trim().length() > 0) {
                                values = attributeValue.split(",");
                            }
                            if (values != null) {
                                editorPanel.remove(editorTextField);
                                editorPanel.add(editorComboBox, java.awt.BorderLayout.NORTH);
                                editorComboBox.setVisible(true);
                                configTreeAction = true;
                                for (int i = 0; i < values.length; i++) {
                                    ((DefaultComboBoxModel) editorComboBox.getModel()).addElement(values[i].trim());
                                }
                                String value = wrapper.getDisplay();
                                origValue = value;
                                comboBoxAction = false;
                                ((DefaultComboBoxModel) editorComboBox.getModel()).setSelectedItem(value);

                                Attr helpAttribute = parentElement.getAttributeNode(ATTRIB_HELP);
                                if (helpAttribute != null) {
                                    helpTextPane.setText(helpAttribute.getValue());
                                }
                                Attr readOnlyAttribute = parentElement.getAttributeNode(ATTRIB_READONLY);
                                if (readOnlyAttribute != null) {
                                    boolean readonly = Boolean.parseBoolean(readOnlyAttribute.getValue());
                                    editorComboBox.setEnabled(readonly);
                                } else {
                                    editorComboBox.setEnabled(true);
                                }
                                Attr editableAttribute = parentElement.getAttributeNode(ATTRIB_EDITABLE);
                                if (editableAttribute != null) {
                                    boolean editable = Boolean.parseBoolean(editableAttribute.getValue());
                                    editorComboBox.setEditable(editable);
                                } else {
                                    editorComboBox.setEditable(true);
                                }
                                comboBoxAction = true;
                            } else {
                                String value = wrapper.getDisplay();
                                comboBoxAction = false;
                                origValue = value;
                                editorPanel.remove(editorComboBox);
                                editorPanel.add(editorTextField, java.awt.BorderLayout.NORTH);

                                editorTextField.setText((String) value);

                                Attr helpAttribute = parentElement.getAttributeNode(ATTRIB_HELP);
                                if (helpAttribute != null) {
                                    helpTextPane.setText(helpAttribute.getValue());
                                }
                                Attr readOnlyAttribute = parentElement.getAttributeNode(ATTRIB_READONLY);
                                if (readOnlyAttribute != null) {
                                    boolean readonly = Boolean.parseBoolean(readOnlyAttribute.getValue());
                                    editorTextField.setEnabled(readonly);
                                } else {
                                    editorTextField.setEnabled(true);
                                }
                                Attr editableAttribute = parentElement.getAttributeNode(ATTRIB_EDITABLE);
                                if (editableAttribute != null) {
                                    boolean editable = Boolean.parseBoolean(editableAttribute.getValue());
                                    editorTextField.setEditable(editable);
                                } else {
                                    editorTextField.setEditable(true);
                                }
                                comboBoxAction = true;
                            }
                        }
                    } else if (wrapper.getNode().getNodeType() == Node.COMMENT_NODE) {
                        comboBoxAction = false;
                        reset();
                        helpTextPane.setText(wrapper.getNode().getTextContent());
                    } else {
                        comboBoxAction = false;
                        reset();
                    }
                }
            }
        }
    }//GEN-LAST:event_configTreeValueChanged

    protected void reset() {
        comboBoxAction = false;
        editorComboBox.removeAllItems();
        helpTextPane.setText(null);
        editorTextField.setText(null);
        editorTextField.setEnabled(false);
        editorPanel.remove(editorTextField);
        editorPanel.remove(editorComboBox);
        editorPanel.add(editorTextField, java.awt.BorderLayout.NORTH);
        editorPanel.repaint();
    }

    protected int exit() {
        int answer = -1;
        if (statusLabel.getText().equals("Document modified")) {
            answer = JOptionPane.showConfirmDialog(this, "Document modified. Do you want to save changes?", "Exit", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (answer == JOptionPane.OK_OPTION) {
                saveDocument();
            }
        }
        return answer;
    }

    private void editorTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editorTextFieldFocusLost
        String value = editorTextField.getText();
        if (value == null) {
            value = "";
        } else {
            value = value.trim();
        }
        TreePath tp = configTree.getSelectionPath();
        if (tp != null) {
            DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) tp.getLastPathComponent();
            NodeWrapper wrapper = (NodeWrapper) treeNode.getUserObject();
            Node node = wrapper.getNode(); // TEXT or CDATA
            if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) {
                DefaultMutableTreeNode parentTreeNode = (DefaultMutableTreeNode) treeNode.getParent();
                NodeWrapper parentWrapper = (NodeWrapper) parentTreeNode.getUserObject();
                Node parentNode = parentWrapper.getNode();
                Element element = null;
                if (parentNode instanceof Element) {
                    element = (Element) parentNode;
                }
                if (value == null) {
                    Attr attributeDefault = element.getAttributeNode(ATTRIB_DEFAULT_VALUE);
                    if (attributeDefault != null) {
                        value = attributeDefault.getValue();
                    }
                }
                Attr attributeDatatype = element.getAttributeNode(ATTRIB_DATATYPE);
                if (attributeDatatype != null) {
                    String datatype = attributeDatatype.getValue();
                    if (validateDatatype(datatype, (String) value)) {
                        node.setTextContent((String) value);
                        wrapper.setNode(node);
                        wrapper.setDisplay((String) value);
                        treeNode.setUserObject(wrapper);
                        ((DefaultTreeModel) configTree.getModel()).reload(treeNode);
                    }
                } else {
                    node.setTextContent((String) value);
                    wrapper.setNode(node);
                    wrapper.setDisplay((String) value);
                    treeNode.setUserObject(wrapper);
                    ((DefaultTreeModel) configTree.getModel()).reload(treeNode);
                }
                if (!origValue.equals(editorTextField.getText() == null ? "" : editorTextField.getText())) {
                    statusLabel.setText("Document modified");
                }
            }
        }
    }//GEN-LAST:event_editorTextFieldFocusLost

    protected boolean validateDatatype(String datatype, String value) {
        boolean ok = false;
        if (datatype != null) {
            datatype = datatype.trim();
        }
        if (datatype.equals("java.lang.String")) {
            ok = true;
        } else if (datatype.equals("java.util.Date")) {
            SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
            sdf.setLenient(false);
            try {
                sdf.parse(value);
                ok = true;
            } catch (java.text.ParseException pe) {
                ErrorDisplayPanel errorPanel = new ErrorDisplayPanel("Invalid value", pe);
                //errorPanel.init();
                JOptionPane.showMessageDialog(messageParent, errorPanel, "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (datatype.equals("java.lang.Number")
                || datatype.equals("java.lang.Long")
                || datatype.equals("java.lang.Integer")
                || datatype.equals("java.lang.Long")
                || datatype.equals("java.lang.Byte")
                || datatype.equals("java.lang.Float")
                || datatype.equals("java.lang.Double")
                || datatype.equals("java.math.BigDecimal")
                || datatype.equals("java.math.BigInteger")) {
            try {
                Class clazz = Class.forName(datatype);
                Constructor c = clazz.getDeclaredConstructor(String.class);
                Object obj = c.newInstance(value);
                ok = true;
            } catch (Exception e) {
                ErrorDisplayPanel errorPanel = new ErrorDisplayPanel("Invalid value", e);
                //errorPanel.init();
                JOptionPane.showMessageDialog(messageParent, errorPanel, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        return ok;
    }

    private void fileLocationTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fileLocationTextFieldFocusLost
        String fileLocation = fileLocationTextField.getText().trim();
        if (!fileLocation.toLowerCase().endsWith(".xml")) {
            path = null;
            ErrorDisplayPanel errorPanel = new ErrorDisplayPanel("This is not XML file", null);
            //errorPanel.init();
            JOptionPane.showMessageDialog(messageParent, errorPanel, "Select File", JOptionPane.ERROR_MESSAGE);
        }

        if (!fileLocation.equals(path)) {
            File file = new File(fileLocation);
            if (!file.exists()) {
                path = null;
                ErrorDisplayPanel errorPanel = new ErrorDisplayPanel("Invalid file", null);
                //errorPanel.init();
                JOptionPane.showMessageDialog(messageParent, errorPanel, "Select File", JOptionPane.ERROR_MESSAGE);
            }
        }
        path = fileLocation;
    }//GEN-LAST:event_fileLocationTextFieldFocusLost

    private void fileLocationTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fileLocationTextFieldFocusGained
        path = fileLocationTextField.getText().trim();
    }//GEN-LAST:event_fileLocationTextFieldFocusGained

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveDocument();
        if (saveListeners == null) {
            return;
        }
        Iterator iter = saveListeners.iterator();
        while (iter.hasNext()) {
            ((ActionListener) iter.next()).actionPerformed(evt);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    protected void saveDocument() {
        if (document == null) {
            ErrorDisplayPanel errorPanel = new ErrorDisplayPanel("Nothing to save", null);
            //errorPanel.init();
            JOptionPane.showMessageDialog(messageParent, errorPanel, "Save", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            write();
            statusLabel.setText("Document saved");
        } catch (Exception e) {
            ErrorDisplayPanel errorPanel = new ErrorDisplayPanel(null, e);
            //errorPanel.init();
            JOptionPane.showMessageDialog(messageParent, errorPanel, "Save", JOptionPane.ERROR_MESSAGE);
        }
    }

    protected void write() {
        OutputStream out = null;
        try {
            if (path != null) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
                File file = new File(path);
                String bakPath = null;
                int idx = path.lastIndexOf(".");
                if (idx > -1) {
                    bakPath = path.substring(0, idx) ;
                } else {
                    bakPath = path;
                }
                File bak = new File(bakPath + "_" + sdf.format(new Date()) + ".xml");
                FileInputStream from = null;
                FileOutputStream to = null;
                try {
                    from = new FileInputStream(file);
                    to = new FileOutputStream(bak);
                    byte[] buffer = new byte[4096];
                    int bytesRead;

                    while ((bytesRead = from.read(buffer)) != -1) {
                        to.write(buffer, 0, bytesRead); // write
                    }
                } finally {
                    if (from != null) {
                        try {
                            from.close();
                        } catch (IOException e) {
                            //
                        }
                    }
                    if (to != null) {
                        try {
                            to.close();
                        } catch (IOException e) {
                            //
                        }
                    }
                }
                out = new FileOutputStream(path);
            } else {
                throw new IOException("Output location is missing");
            }

            DOMImplementationLS impl = null;
            try {
                if ((document.getFeature("Core", "3.0") != null) && (document.getFeature("LS", "3.0") != null)) {
                    impl = (DOMImplementationLS) (document.getImplementation()).getFeature("LS", "3.0");
                } else {
                    throw new RuntimeException("DOM Load and Save is unsupported");
                }

                LSSerializer serializer = impl.createLSSerializer();
                LSOutput lso = impl.createLSOutput();
                lso.setByteStream((OutputStream) out);
                boolean success = serializer.write(document, lso);
            } catch (Exception e) {
                e.printStackTrace();
                throw new RuntimeException("Failure to save XML: " + e.toString(), e);
            }
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Failure to save XML: " + e.toString(), e);
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    throw new RuntimeException("Failure to close file: " + e.toString(), e);
                }
            }
        }
    }

    public void loadTree() {
        loading = true;
        if (path == null || !path.toLowerCase().endsWith(".xml")) {
            path = null;
            ErrorDisplayPanel errorPanel = new ErrorDisplayPanel("Missing or invalid file", null);
            //errorPanel.init();
            JOptionPane.showMessageDialog(messageParent, errorPanel, "Select XML File", JOptionPane.ERROR_MESSAGE);
            return;
        }
        helpTextPane.setText(null);
        editorComboBox.setEditable(false);
        editorComboBox.setEnabled(false);
        configTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        configTree.setEditable(false);
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            document = factory.newDocumentBuilder().parse(new File(path));
            Element root = document.getDocumentElement();
            DefaultMutableTreeNode treeRoot = buildTree(root);
            configTree.setModel(new DefaultTreeModel(treeRoot));
        } catch (IOException ioe) {
            ioe.printStackTrace();
            ErrorDisplayPanel errorPanel = new ErrorDisplayPanel(null, ioe);
            //errorPanel.init();
            JOptionPane.showMessageDialog(messageParent, errorPanel, "Select XML File", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ioe) {
            ioe.printStackTrace();
            ErrorDisplayPanel errorPanel = new ErrorDisplayPanel(null, ioe);
            //errorPanel.init();
            JOptionPane.showMessageDialog(messageParent, errorPanel, "Select XML File", JOptionPane.ERROR_MESSAGE);
        }
        loading = false;
        statusLabel.setText("Document loaded");
    }

    protected DefaultMutableTreeNode buildTree(Node node) {
        DefaultMutableTreeNode treeNode = null;
        NodeWrapper treeNodeUserObject = new NodeWrapper(node);
        if (node instanceof Element) {
            Attr visibleAttribute = ((Element) node).getAttributeNode(ATTRIB_VISIBLE);
            if (visibleAttribute != null) {
                boolean visible = Boolean.parseBoolean(visibleAttribute.getValue());
                if (!visible) {
                    return null;
                }
            }
            NodeList children = ((Element) node).getChildNodes();
            if (children.getLength() > 0) {
                treeNodeUserObject.setDisplay(((Element) node).getTagName());
                treeNode = new DefaultMutableTreeNode(treeNodeUserObject);
                treeNode.setAllowsChildren(true);
                for (int i = 0; i < children.getLength(); i++) {
                    Object child = children.item(i);
                    if (child != null) {
                        DefaultMutableTreeNode childTreeNode = buildTree((Node) child);
                        if (childTreeNode != null) {
                            treeNode.add(childTreeNode);
                        }
                    }
                }
            }
        } else if (node.getNodeType() == Node.COMMENT_NODE) {
            treeNodeUserObject.setDisplay(COMMENT);
            treeNode = new DefaultMutableTreeNode(treeNodeUserObject);
            treeNode.setAllowsChildren(false);
        } else if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) {
            if (node.getParentNode().getNodeType() == Node.COMMENT_NODE) {
                return null;
            }
            if (node.getTextContent() == null || node.getTextContent().trim().equals("")) {
                return null;
            }
            treeNodeUserObject.setDisplay(((Element) node.getParentNode()).getTextContent().trim());
            treeNode = new DefaultMutableTreeNode(treeNodeUserObject);
        }
        return treeNode;
    }

    protected TreeModel getInitTreeModel() {
        DefaultTreeModel treeModel = null;
        try {
            DefaultMutableTreeNode root = new DefaultMutableTreeNode(CONFIGURATION);
            root.setAllowsChildren(true);
            root.add(new DefaultMutableTreeNode(EMPTY));
            treeModel = new DefaultTreeModel(root);

        } catch (Exception e) {
            e.printStackTrace();
            ErrorDisplayPanel errorPanel = new ErrorDisplayPanel(null, e);
            //errorPanel.init();
            JOptionPane.showMessageDialog(messageParent, errorPanel, "Parse", JOptionPane.ERROR_MESSAGE);
        }
        return treeModel;
    }

    public void setDefaultCloseOperation(int closeOperation) {
        this.closeOperation = closeOperation;
    }

    public Document getDocument() {
        return document;
    }

    public void setJdomDocument(Document document) {
        this.document = document;
    }

    public boolean isShowFilePanel() {
        return showFilePanel;
    }

    public void setShowFilePanel(boolean showFilePanel) {
        this.showFilePanel = showFilePanel;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public int getCloseOperation() {
        return closeOperation;
    }

    public void setCloseOperation(int closeOperation) {
        this.closeOperation = closeOperation;
    }

    public Component getMessageParent() {
        return messageParent;
    }

    public void setMessageParent(Component messageParent) {
        this.messageParent = messageParent;
    }

    public String getDateFormat() {
        return dateFormat;
    }

    public void setDateFormat(String dateFormat) {
        this.dateFormat = dateFormat;
    }

    public void addExitListener(ActionListener exitListener) {
        if (exitListeners == null) {
            exitListeners = new ArrayList();
        }
        exitListeners.add(exitListener);
    }

    public void removeExitListener(ActionListener exitListener) {
        if (exitListeners == null) {
            return;
        }
        exitListeners.remove(exitListener);
    }

    public void addSaveListener(ActionListener saveListener) {
        if (saveListeners == null) {
            saveListeners = new ArrayList();
        }
        saveListeners.add(saveListener);
    }

    public void removeSaveListener(ActionListener saveListener) {
        if (saveListeners == null) {
            return;
        }
        saveListeners.remove(saveListener);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPanel buttonPanel;
    protected javax.swing.JTree configTree;
    protected javax.swing.JComboBox editorComboBox;
    protected javax.swing.JPanel editorPanel;
    protected javax.swing.JTextField editorTextField;
    protected javax.swing.JButton exitButton;
    protected javax.swing.JButton fileLocationButton;
    protected javax.swing.JTextField fileLocationTextField;
    protected javax.swing.JPanel filePanel;
    protected javax.swing.JTextPane helpTextPane;
    protected javax.swing.JButton loadFileButton;
    protected javax.swing.JPanel rightPanel;
    protected javax.swing.JButton saveButton;
    protected javax.swing.JScrollPane scrollPane;
    protected javax.swing.JPanel southPanel;
    protected javax.swing.JSplitPane splitPane;
    protected javax.swing.JLabel statusLabel;
    protected javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    protected DocumentBuilderFactory documentBuilderFactory;
    protected DocumentBuilder documentBuilder;
    protected String path;
    protected boolean loading;
    protected boolean comboBoxAction;
    protected boolean configTreeAction;
    protected Document document;
    protected boolean showFilePanel = true;
    protected int closeOperation = javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
    protected Component messageParent = this;
    protected String origValue = "";
    protected String dateFormat = "MM/dd/yyyy";
    protected List exitListeners;
    protected List saveListeners;
    public static final String ATTRIB_VALUES = "values";
    public static final String ATTRIB_HELP = "help";
    public static final String ATTRIB_READONLY = "readonly";
    public static final String ATTRIB_EDITABLE = "editable";
    public static final String ATTRIB_DEFAULT_VALUE = "defaultValue";
    public static final String ATTRIB_DATATYPE = "datatype";
    public static final String ATTRIB_VISIBLE = "visible";
    public static final String COMMENT = "comment";
    public static final String CONFIGURATION = "configuration";
    public static final String EMPTY = "<empty>";

    class XMLFileChooserFilter extends FileFilter {

        XMLFileChooserFilter() {
        }

        @Override
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }
            String fileName = f.getName();
            if (fileName.toLowerCase().endsWith(".xml")) {
                return true;
            }
            return false;
        }

        @Override
        public String getDescription() {
            return "XML Documents (*.XML; *.xml)";
        }
    }

    class NodeWrapper implements Serializable {

        private static final long serialVersionUID = 1571148091922840706L;
        protected Node node;
        protected String display;

        public NodeWrapper() {
        }

        public NodeWrapper(Node node) {
            this.node = node;
        }

        public Node getNode() {
            return node;
        }

        public void setNode(Node node) {
            this.node = node;
        }

        @Override
        public String toString() {
            return display;
        }

        public String getDisplay() {
            return display;
        }

        public void setDisplay(String display) {
            this.display = display;
        }
    }
}
