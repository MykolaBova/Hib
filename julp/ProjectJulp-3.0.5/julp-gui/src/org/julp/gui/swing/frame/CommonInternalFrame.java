package org.julp.gui.swing.frame;

import javax.swing.*;

public abstract class CommonInternalFrame extends javax.swing.JInternalFrame implements java.awt.event.ActionListener {

    private static final long serialVersionUID = -9169591871672839366L;
    protected boolean modified = false;
    protected JFrame parentFrame;

    public CommonInternalFrame() {
        //initComponents();        
        //getContentPane().setLayout(null);
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {

            @Override
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }

            @Override
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }

            @Override
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                //System.out.println("CommonInternalFrame::internalFrameClosing: " + evt.getSource());
                //internalFrameClosing(evt);
            }

            @Override
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }

            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }

            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }

            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
    }

    protected void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
        //System.out.println("CommonInternalFrame::formInternalFrameClosed: " + evt.getSource());
        try {
            this.setClosed(true);
        } catch (java.beans.PropertyVetoException e) {
            throw new RuntimeException(e);
        }
    }

    protected void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
        //System.out.println("CommonInternalFrame::formInternalFrameClosing: " + evt.getSource());
        if (modified) {
            int answer = JOptionPane.showConfirmDialog(this, "Do you want to save?", "Data was modified", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (answer == JOptionPane.YES_OPTION) {
                this.storeAll();
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setFont(null);
    }
    // </editor-fold>//GEN-END:initComponents

    /** Getter for property modified.
     * @return Value of property modified.
     *
     */
    public boolean isModified() {
        return modified;
    }

    /** Setter for property modified.
     * @param modified New value of property modified.
     *
     */
    public void setModified(boolean modified) {
        this.modified = modified;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        //System.out.println(e.getSource());
        if (e.getSource() instanceof RadioButtonMenuItemInternalFrameListener) {
            try {
                this.setSelected(true);
                //this.setMaximum(true);
            } catch (java.beans.PropertyVetoException pve) {
            }
            this.moveToFront();
        }
    }

    public void storeAll() {
        System.out.println("storeAll()");
    }

    public void find() {
    }

    public void add() {
    }

    public void store() {
    }

    public void remove() {
    }

    /** Getter for property parentFrame.
     * @return Value of property parentFrame.
     *
     */
    public JFrame getParentFrame() {
        return parentFrame;
    }

    /** Setter for property parentFrame.
     * @param parentFrame New value of property parentFrame.
     *
     */
    public void setParentFrame(JFrame parentFrame) {
        this.parentFrame = parentFrame;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
