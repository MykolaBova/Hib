package org.julp.gui.swing.adhoc;

import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.*;
import java.util.*;
import org.julp.*;
import org.julp.db.DBMetaData;
import org.julp.gui.swing.actions.adhoc.*;
import org.julp.gui.swing.combo.SteppedComboBox;
import org.julp.search.SearchCriteriaBuilder;
import org.julp.search.SearchCriteriaHolder;

public class AdhocDialog extends javax.swing.JDialog implements TableModelListener {

    private static final long serialVersionUID = -2835543017268600678L;

    public AdhocDialog() {
        this.setModal(true);        
        init();
        criteriaTable.setSurrendersFocusOnKeystroke(true);
        sortTable.setSurrendersFocusOnKeystroke(true);
        findTabbedPane.setMnemonicAt(0, KeyEvent.VK_C);
        findTabbedPane.setMnemonicAt(1, KeyEvent.VK_S);
    }

    public AdhocDialog(Component parentComponent, Object requestor) {
        this.setModal(true);
        this.requestor = requestor;
        this.parentComponent = parentComponent;        
        init();
        criteriaTable.setSurrendersFocusOnKeystroke(true);
        sortTable.setSurrendersFocusOnKeystroke(true);
        findTabbedPane.setMnemonicAt(0, KeyEvent.VK_C);
        findTabbedPane.setMnemonicAt(1, KeyEvent.VK_S);
        //setLocation();
    }

    public AdhocDialog(Object requestor) {
        this.setModal(true);
        this.requestor = requestor;        
        init();
        criteriaTable.setSurrendersFocusOnKeystroke(true);
        sortTable.setSurrendersFocusOnKeystroke(true);
        findTabbedPane.setMnemonicAt(0, KeyEvent.VK_C);
        findTabbedPane.setMnemonicAt(1, KeyEvent.VK_S);
    }
    
    private void init() {
        initComponents();
        initActions();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionsToolBar = new javax.swing.JToolBar();
        addCriteriaButton = new javax.swing.JButton();
        addSortButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        findTabbedPane = new javax.swing.JTabbedPane();
        searchTab = new javax.swing.JPanel();
        searchScrollPane = new javax.swing.JScrollPane();
        criteriaTable = new javax.swing.JTable();
        sortTab = new javax.swing.JPanel();
        sortScrollPane = new javax.swing.JScrollPane();
        sortTable = new javax.swing.JTable();
        buttonsPanel = new javax.swing.JPanel();
        findButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setTitle("Find Criteria");
        setAlwaysOnTop(true);
        setModal(true);
        setName(""); // NOI18N
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        actionsToolBar.setFloatable(false);
        actionsToolBar.setMargin(new java.awt.Insets(5, 0, 5, 0));
        actionsToolBar.setRollover(true);

        addCriteriaButton.setToolTipText("");
        addCriteriaButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        addCriteriaButton.setMaximumSize(new java.awt.Dimension(20, 20));
        addCriteriaButton.setMinimumSize(new java.awt.Dimension(16, 16));
        addCriteriaButton.setPreferredSize(new java.awt.Dimension(20, 20));
        actionsToolBar.add(addCriteriaButton);

        addSortButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        addSortButton.setMaximumSize(new java.awt.Dimension(20, 20));
        addSortButton.setMinimumSize(new java.awt.Dimension(16, 16));
        addSortButton.setPreferredSize(new java.awt.Dimension(20, 20));
        actionsToolBar.add(addSortButton);

        removeButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        removeButton.setMaximumSize(new java.awt.Dimension(20, 20));
        removeButton.setMinimumSize(new java.awt.Dimension(16, 16));
        removeButton.setPreferredSize(new java.awt.Dimension(20, 20));
        actionsToolBar.add(removeButton);

        getContentPane().add(actionsToolBar, java.awt.BorderLayout.NORTH);

        findTabbedPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        findTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                findTabbedPaneStateChanged(evt);
            }
        });

        searchTab.setName("Criteria"); // NOI18N
        searchTab.setLayout(new java.awt.BorderLayout());

        searchScrollPane.setBorder(null);

        criteriaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Field", "Condition", "Search Value", "AND/OR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        criteriaTable.setRowHeight(20);
        ((DefaultListSelectionModel) criteriaTable.getSelectionModel()).setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
        criteriaTable.getTableHeader().setReorderingAllowed(false);
        criteriaTable.getModel().addTableModelListener(this);
        criteriaTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                criteriaTableKeyReleased(evt);
            }
        });
        criteriaTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                criteriaTableMouseClicked(evt);
            }
        });
        searchScrollPane.setViewportView(criteriaTable);

        searchTab.add(searchScrollPane, java.awt.BorderLayout.CENTER);

        findTabbedPane.addTab("Criteria", searchTab);

        sortTab.setLayout(new java.awt.BorderLayout());

        sortScrollPane.setBorder(null);

        sortTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Field", "Ascending"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        sortTable.setRowHeight(20);
        sortTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        sortTable.getColumnModel().getColumn(1).setMaxWidth(80);
        sortTable.getTableHeader().setReorderingAllowed(false);
        sortScrollPane.setViewportView(sortTable);

        sortTab.add(sortScrollPane, java.awt.BorderLayout.CENTER);

        findTabbedPane.addTab("Sort", sortTab);

        getContentPane().add(findTabbedPane, java.awt.BorderLayout.CENTER);

        buttonsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 10, 5));
        buttonsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        findButton.setMnemonic('i');
        findButton.setText("Find");
        findButton.setMaximumSize(new java.awt.Dimension(100, 26));
        findButton.setPreferredSize(new java.awt.Dimension(100, 26));
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(findButton);

        cancelButton.setMnemonic('l');
        cancelButton.setText("Cancel");
        cancelButton.setMinimumSize(new java.awt.Dimension(58, 26));
        cancelButton.setPreferredSize(new java.awt.Dimension(100, 26));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(cancelButton);

        getContentPane().add(buttonsPanel, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-540)/2, (screenSize.height-355)/2, 540, 355);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        this.toFront();
    }//GEN-LAST:event_formWindowLostFocus

    private void criteriaTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_criteriaTableMouseClicked
        int column = criteriaTable.getSelectedColumn();
        int row = criteriaTable.getSelectedRow();
        setEditor(row, column);
    }//GEN-LAST:event_criteriaTableMouseClicked

    private void criteriaTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_criteriaTableKeyReleased
        int column = criteriaTable.getSelectedColumn();
        int row = criteriaTable.getSelectedRow();
        setEditor(row, column);
    }//GEN-LAST:event_criteriaTableKeyReleased

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        find();
        this.setVisible(false);
    }//GEN-LAST:event_findButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void findTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_findTabbedPaneStateChanged
        if (!initialized) {
            return;
        }
        if (criteriaTable.getCellEditor() != null) {
            criteriaTable.getCellEditor().stopCellEditing();
        }
        if (sortTable.getCellEditor() != null) {
            sortTable.getCellEditor().stopCellEditing();
        }
        int idx = ((JTabbedPane) evt.getSource()).getSelectedIndex();
        if (idx == 0) {             // criteria tab
            setupCriteriaTab();
        } else if (idx == 1) {     // sort tab
            setupSortTab();
        }
    }//GEN-LAST:event_findTabbedPaneStateChanged

    protected void setupCriteriaTab() {
        addCriteriaAction.setCriteriaTable(criteriaTable);
        addCriteriaAction.setEnabled(true);
        addCriteriaButton.setAction(addCriteriaAction);
        if (addCriteriaAction.getValue(Action.SMALL_ICON) != null) {
            addCriteriaButton.setText("");
        } else {
            addCriteriaButton.setText("+");
        }
        addSortAction.setSortTable(sortTable);
        addSortAction.setEnabled(false);
        addSortButton.setAction(addSortAction);
        if (addSortAction.getValue(Action.SMALL_ICON) != null) {
            addSortButton.setText("");
        } else {
            addSortButton.setText("+");
        }
        removeCriteriaAction.setCriteriaTable(criteriaTable);
        removeButton.setAction(removeCriteriaAction);
        if (removeCriteriaAction.getValue(Action.SMALL_ICON) != null) {
            removeButton.setText("");
        } else {
            removeButton.setText("-");
        }
    }

    protected void setupSortTab() {
        addCriteriaAction.setCriteriaTable(criteriaTable);
        addCriteriaAction.setEnabled(false);
        addCriteriaButton.setAction(addCriteriaAction);
        if (addCriteriaAction.getValue(Action.SMALL_ICON) != null) {
            addCriteriaButton.setText("");
        } else {
            addCriteriaButton.setText("+");
        }
        addSortAction.setSortTable(sortTable);
        addSortAction.setEnabled(true);
        addSortButton.setAction(addSortAction);
        if (addSortAction.getValue(Action.SMALL_ICON) != null) {
            addSortButton.setText("");
        } else {
            addSortButton.setText("+");
        }
        removeSortAction.setSortTable(sortTable);
        removeButton.setAction(removeSortAction);
        if (removeSortAction.getValue(Action.SMALL_ICON) != null) {
            removeButton.setText("");
        } else {
            removeButton.setText("-");
        }
    }

    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.setVisible(false);
    }//GEN-LAST:event_exitForm

    @Override
    public void tableChanged(TableModelEvent e) {
        int column = e.getColumn();
        if (e.getType() == TableModelEvent.UPDATE) {
            if (column == 0) {
                int row = criteriaTable.getSelectedRow();
                ValueObject field = (ValueObject) criteriaTable.getValueAt(row, 0);
                Map fieldOperators = searchCriteriaBuilder.getFieldOperators();
                Object obj = fieldOperators.get(field);
                if (obj != null) {
                    java.util.List operList = (java.util.List) obj;
                    ValueObject firstOperator = (ValueObject) operList.get(0);
                    criteriaTable.setValueAt(firstOperator, row, 1);
                }
                criteriaTable.setValueAt(new ValueObject(null, null), row, 2);
                criteriaTable.setValueAt(new ValueObject("AND", "AND"), row, 3);
                setEditor(row, column);
            } else if (column == 1) {
                criteriaTable.getColumn("Condition").setCellEditor(new DefaultCellEditor(new JTextField()));
            } else if (column == 2) {
                criteriaTable.getColumn("Search Value").setCellEditor(new DefaultCellEditor(new JTextField()));
            }
        }
    }

    protected void setEditor(int row, int column) {
        if (column == 3) {
            return;
        } else if (column == 0) {
            int rowCount = criteriaTable.getModel().getRowCount();
            java.util.Set selectedFields = new TreeSet();
            for (int i = 0; i < rowCount; i++) {
                selectedFields.add(criteriaTable.getValueAt(i, 0));
            }
            int sortRowCount = sortTable.getModel().getRowCount();
            for (int i = 0; i < sortRowCount; i++) {
                ValueObject field = (ValueObject) sortTable.getValueAt(i, 0);
                if (!selectedFields.contains(field)) {
                    ((DefaultTableModel) sortTable.getModel()).removeRow(i);
                    i--;
                    sortRowCount--;
                }
            }
            SteppedComboBox sortFields = new SteppedComboBox(selectedFields.toArray());
            sortFields.setPopupWidth(sortFields.getPreferredSize().width);
            sortRowCount = sortTable.getModel().getRowCount();
            for (int i = 0; i < sortRowCount; i++) {
                sortTable.getColumn("Field").setCellEditor(new DefaultCellEditor(sortFields));
            }
        } else if (column == 1) {
            ValueObject field = (ValueObject) criteriaTable.getValueAt(row, 0);
            Map fieldOperators = searchCriteriaBuilder.getFieldOperators();
            Object obj = fieldOperators.get(field);
            if (obj != null) {
                java.util.List operList = (java.util.List) obj;
                SteppedComboBox operators = new SteppedComboBox(operList.toArray());
                operators.setPopupWidth(operators.getPreferredSize().width);
                criteriaTable.getColumn("Condition").setCellEditor(new DefaultCellEditor(operators));
            }
        } else if (column == 2) {
            ValueObject field = (ValueObject) criteriaTable.getValueAt(row, 0);
            if (searchCriteriaBuilder.getFieldValues() != null) {
                java.util.List valuesList = (java.util.List) searchCriteriaBuilder.getFieldValues().get(field);
                if (valuesList != null) {
                    SteppedComboBox values = new SteppedComboBox(valuesList.toArray());
                    values.setPopupWidth(values.getPreferredSize().width);
                    criteriaTable.getColumn("Search Value").setCellEditor(new DefaultCellEditor(values));
                } else {
                    criteriaTable.getColumn("Search Value").setCellEditor(new DefaultCellEditor(new JTextField()));
                }
            } else {
                criteriaTable.getColumn("Search Value").setCellEditor(new DefaultCellEditor(new JTextField()));
            }
        }
    }

    public void initActions() {
        addCriteriaAction = new AddCriteriaAction();
        addCriteriaAction.setCriteriaTable(criteriaTable);
        addCriteriaAction.setEnabled(true);
        addCriteriaButton.setAction(addCriteriaAction);

        addSortAction = new AddSortAction();
        addSortAction.setSortTable(sortTable);
        addSortAction.setCriteriaTable(criteriaTable);
        addSortAction.setEnabled(false);
        addSortButton.setAction(addSortAction);

        removeCriteriaAction = new RemoveCriteriaAction();
        removeCriteriaAction.setCriteriaTable(criteriaTable);
        removeCriteriaAction.setSortTable(sortTable);
        removeCriteriaAction.setEnabled(true);
        removeButton.setAction(removeCriteriaAction);

        removeSortAction = new RemoveSortAction();
        removeSortAction.setSortTable(sortTable);

        setupCriteriaTab();
        setLocation();
        initialized = true;
    }

    public void find() {
        if (criteriaTable.getCellEditor() != null) {
            criteriaTable.getCellEditor().stopCellEditing();
        }
        if (sortTable.getCellEditor() != null) {
            sortTable.getCellEditor().stopCellEditing();
        }

        int rowCount = criteriaTable.getModel().getRowCount();
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(this, "Please add search criteria", "Search", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            java.util.List searchCriteriaHolders = new ArrayList(rowCount);
            for (int i = 0; i < rowCount; i++) {
                SearchCriteriaHolder holder = new SearchCriteriaHolder();
                holder.setFieldName(((ValueObject) criteriaTable.getValueAt(i, 0)).getValue().toString());
                ValueObject operatorValueObject = (ValueObject) criteriaTable.getValueAt(i, 1);
                String operator = operatorValueObject.getValue().toString();
                holder.setOperator(operator);
                if (operator.equals(SearchCriteriaHolder.LIKE)) {                    
                    holder.setLikeHint(searchCriteriaBuilder.getLikeHint(operatorValueObject.getValueLabel()));
                    //SearchCriteriaHolder.LIKE_HINTS.valueOf(operatorValueObject.getValueLabel())
                    
                    //holder.setLikeHint(searchCriteriaBuilder.getLikeHint(operatorValueObject.getValueLabel()));
                }
                Object value = criteriaTable.getValueAt(i, 2);
                if (value instanceof ValueObject) {
                    holder.setSearchValue(((ValueObject) value).getValue());
                } else {
                    holder.setSearchValue(value);
                }
                holder.setBooleanCondition(((ValueObject) criteriaTable.getValueAt(i, 3)).getValue().toString());
                searchCriteriaHolders.add(holder);
            }
            searchCriteriaBuilder.setSearchCriteriaHolders(searchCriteriaHolders);
            rowCount = sortTable.getModel().getRowCount();
            if (rowCount > 0) {
                DBMetaData metaData = searchCriteriaBuilder.getMetaData();
                java.util.List sort = new ArrayList(rowCount);
                for (int i = 0; i < rowCount; i++) {
                    String[] orderBy = new String[2];
                    String field = ((ValueObject) sortTable.getValueAt(i, 0)).getValue().toString();
                    int columnIndex = metaData.getFieldIndexByFieldName(field);
                    orderBy[0] = metaData.getColumnName(columnIndex);
                    Boolean sortDir = (Boolean) sortTable.getValueAt(i, 1);
                    if (sortDir.booleanValue() == true) {
                        orderBy[1] = "ASC";
                    } else {
                        orderBy[1] = "DESC";
                    }
                    sort.add(orderBy);
                }
                searchCriteriaBuilder.setSort(sort, false);
            }
        } catch (Throwable t) {
            t.printStackTrace();
            JOptionPane.showMessageDialog(this, t.getMessage(), "Search", JOptionPane.ERROR_MESSAGE);
        }
        Class clazz = requestor.getClass();
        try {
            java.lang.reflect.Method method = clazz.getMethod(findMethodName, new Class[0]);
            method.invoke(requestor, new Object[0]);
        } catch (NoSuchMethodException nsme) {
            nsme.printStackTrace();
            throw new DataAccessException(nsme.getMessage());
        } catch (java.lang.IllegalAccessException eae) {
            eae.printStackTrace();
            throw new DataAccessException(eae.getMessage());
        } catch (java.lang.reflect.InvocationTargetException ite) {
            ite.printStackTrace();
            throw new DataAccessException(ite.getTargetException());
        }
    }

    public SearchCriteriaBuilder getSearchCriteriaBuilder() {
        return searchCriteriaBuilder;
    }

    public void setSearchCriteriaBuilder(SearchCriteriaBuilder searchCriteriaBuilder) {
        this.searchCriteriaBuilder = searchCriteriaBuilder;
        addCriteriaAction.setSearchCriteriaBuilder(searchCriteriaBuilder);
        addSortAction.setSearchCriteriaBuilder(searchCriteriaBuilder);
    }

    public void addCriteria() {
        addCriteriaButton.doClick();       
    }

    public javax.swing.JButton getFindButton() {
        return findButton;
    }

    public javax.swing.JButton getCancelButton() {
        return cancelButton;
    }

    public void showError(String title, String msg, Throwable t) {
        JOptionPane.showMessageDialog(this, msg, title, JOptionPane.ERROR_MESSAGE);
    }

    protected void setLocation() {
        setLocationRelativeTo(parentComponent);
    }

    public java.lang.String getFindMethodName() {
        return findMethodName;
    }

    public void setFindMethodName(java.lang.String findMethodName) {
        this.findMethodName = findMethodName;
    }

    public Object getRequestor() {
        return requestor;
    }

    public void setRequestor(Object requestor) {
        this.requestor = requestor;
    }

    public Component getParentComponent() {
        return parentComponent;
    }

    public void setParentComponent(Component parentComponent) {
        this.parentComponent = parentComponent;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar actionsToolBar;
    private javax.swing.JButton addCriteriaButton;
    private javax.swing.JButton addSortButton;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTable criteriaTable;
    private javax.swing.JButton findButton;
    private javax.swing.JTabbedPane findTabbedPane;
    private javax.swing.JButton removeButton;
    private javax.swing.JScrollPane searchScrollPane;
    private javax.swing.JPanel searchTab;
    private javax.swing.JScrollPane sortScrollPane;
    private javax.swing.JPanel sortTab;
    private javax.swing.JTable sortTable;
    // End of variables declaration//GEN-END:variables
    protected AddCriteriaAction addCriteriaAction;
    protected AddSortAction addSortAction;
    protected RemoveCriteriaAction removeCriteriaAction;
    protected RemoveSortAction removeSortAction;
    protected boolean initialized;
    protected SearchCriteriaBuilder searchCriteriaBuilder;
    protected Object requestor;
    public Component parentComponent;
    protected String findMethodName = "find";
}
