package org.julp.gui.swing.frame;

import java.awt.Component;
import java.awt.KeyboardFocusManager;
import java.util.Enumeration;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JTable;
import org.julp.gui.swing.actions.table.CellCopyAction;
import org.julp.gui.swing.actions.table.CellCutAction;
import org.julp.gui.swing.actions.table.CellPasteAction;
import org.julp.gui.swing.actions.table.SaveAsAction;
import org.julp.gui.swing.actions.table.SelectAllCellsAction;
import org.julp.gui.swing.actions.text.CopyAction;
import org.julp.gui.swing.actions.text.CutAction;
import org.julp.gui.swing.actions.text.DeleteAction;
import org.julp.gui.swing.actions.text.PasteAction;
import org.julp.gui.swing.actions.text.SelectAllAction;
import org.julp.gui.swing.config.ConfigurationEditorFrame;

public abstract class MDIFrame extends javax.swing.JFrame implements java.awt.event.ActionListener, javax.swing.event.InternalFrameListener {
    private static final long serialVersionUID = 8110704829358925355L;

    public MDIFrame() {
        initComponents();
//        restoreBounds();
        //Implement in descendent object. Example:
        //super();
        //appname = Config.getConfigValue("//appname");

    }

    /** Example:
     * try{
     * int x = this.getX();
     * int y = this.getY();
     * int w = this.getWidth();
     * int h = this.getHeight();
     *
     * Config.getInstance().setConfigValue("//frame-position/x", String.valueOf(x));
     * Config.getInstance().setConfigValue("//frame-position/y", String.valueOf(y));
     * Config.getInstance().setConfigValue("//frame-position/width", String.valueOf(w));
     * Config.getInstance().setConfigValue("//frame-position/height", String.valueOf(h));
     * Config.getInstance().write();
     * }catch (Exception e){
     * ErrorDisplayPanel errorPanel = new ErrorDisplayPanel(null, null);
     * errorPanel.init();
     * JOptionPane.showMessageDialog(this, errorPanel, "Save settings", JOptionPane.ERROR_MESSAGE);
     * }
     */
    protected abstract void storeBounds();

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        openedWindowsButtonGroup = new javax.swing.ButtonGroup();
        desktopPane = new javax.swing.JDesktopPane();
        status = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        windowMenu = new javax.swing.JMenu();
        lookAndFeelMenu = new javax.swing.JMenu();
        windowMenuSeparator1 = new javax.swing.JSeparator();
        cascadeMenuItem = new javax.swing.JMenuItem();
        tileHorizontalMenuItem = new javax.swing.JMenuItem();
        tileVerticalMenuItem = new javax.swing.JMenuItem();
        windowMenuSeparator2 = new javax.swing.JSeparator();
        minAllMenuItem = new javax.swing.JMenuItem();
        maxAllMenuItem = new javax.swing.JMenuItem();
        closeAllButActiveMenuItem = new javax.swing.JMenuItem();
        closeAllMenuItem = new javax.swing.JMenuItem();
        windowMenuSeparator3 = new javax.swing.JSeparator();
        toolsMenu = new javax.swing.JMenu();
        configMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("MDIFrame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                MDIFrame.this.windowClosing(evt);
            }
        });

        desktopPane.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        getContentPane().add(desktopPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(status, java.awt.BorderLayout.SOUTH);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");
        fileMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                fileMenuSelected(evt);
            }
        });

        openMenu.setMnemonic('o');
        openMenu.setText("Open");
        fileMenu.add(openMenu);

        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save As ...");
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");
        editMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                editMenuSelected(evt);
            }
        });

        menuBar.add(editMenu);

        windowMenu.setMnemonic('w');
        windowMenu.setText("Window");
        lookAndFeelMenu.setMnemonic('l');
        lookAndFeelMenu.setText("Look&Feel");
        windowMenu.add(lookAndFeelMenu);

        windowMenu.add(windowMenuSeparator1);

        cascadeMenuItem.setMnemonic('c');
        cascadeMenuItem.setText("Cascade");
        cascadeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cascadeMenuItemActionPerformed(evt);
            }
        });

        windowMenu.add(cascadeMenuItem);

        tileHorizontalMenuItem.setMnemonic('h');
        tileHorizontalMenuItem.setText("Tile Horizontally");
        tileHorizontalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tileHorizontalMenuItemActionPerformed(evt);
            }
        });

        windowMenu.add(tileHorizontalMenuItem);

        tileVerticalMenuItem.setMnemonic('v');
        tileVerticalMenuItem.setText("Tile Vertically");
        tileVerticalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tileVerticalMenuItemActionPerformed(evt);
            }
        });

        windowMenu.add(tileVerticalMenuItem);

        windowMenu.add(windowMenuSeparator2);

        minAllMenuItem.setMnemonic('z');
        minAllMenuItem.setText("Minimize All");
        minAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minAllMenuItemActionPerformed(evt);
            }
        });

        windowMenu.add(minAllMenuItem);

        maxAllMenuItem.setMnemonic('x');
        maxAllMenuItem.setText("Maximize All");
        maxAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxAllMenuItemActionPerformed(evt);
            }
        });

        windowMenu.add(maxAllMenuItem);

        closeAllButActiveMenuItem.setMnemonic('s');
        closeAllButActiveMenuItem.setText("Close All but Active");
        closeAllButActiveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAllButActiveMenuItemActionPerformed(evt);
            }
        });

        windowMenu.add(closeAllButActiveMenuItem);

        closeAllMenuItem.setMnemonic('a');
        closeAllMenuItem.setText("Close All");
        closeAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAllMenuItemActionPerformed(evt);
            }
        });

        windowMenu.add(closeAllMenuItem);

        windowMenuSeparator3.setVisible(false);
        windowMenu.add(windowMenuSeparator3);

        menuBar.add(windowMenu);

        toolsMenu.setMnemonic('t');
        toolsMenu.setText("Tools");
        configMenuItem.setMnemonic('c');
        configMenuItem.setText("Configurations");
        configMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configMenuItemActionPerformed(evt);
            }
        });

        toolsMenu.add(configMenuItem);

        menuBar.add(toolsMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");
        helpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuActionPerformed(evt);
            }
        });

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

    }
    // </editor-fold>//GEN-END:initComponents

    private void fileMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_fileMenuSelected
        java.awt.KeyboardFocusManager focusManager = java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager();
        java.awt.Component comp = focusManager.getPermanentFocusOwner();
        if (comp instanceof JTable) {
            SaveAsAction saveAsAction = new SaveAsAction();
            saveAsAction.setParentComponent(this);
            JTable table = (JTable) comp;
            saveAsAction.setTable(table);
            saveAsMenuItem.setAction(saveAsAction);
            saveAsMenuItem.setEnabled(true);
        } else {
            saveAsMenuItem.setEnabled(false);
        }
    }//GEN-LAST:event_fileMenuSelected

    private void configMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configMenuItemActionPerformed
        confEditorFrame = new ConfigurationEditorFrame();
        confEditorFrame.getConfigurationEditorPanel().addSaveListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configChanged(evt);
            }
        });
        confEditorFrame.setVisible(true);
    }//GEN-LAST:event_configMenuItemActionPerformed

    private void helpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_helpMenuActionPerformed

    private void windowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosing
        storeBounds();
    }//GEN-LAST:event_windowClosing

    private void closeAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAllMenuItemActionPerformed
        windowMenuSeparator3.setVisible(false);
        JInternalFrame[] iFrames = desktopPane.getAllFrames();
        for (int i = 0; i < iFrames.length; i++) {
            iFrames[i].doDefaultCloseAction();
        }
        Enumeration items = openedWindowsButtonGroup.getElements();
        while (items.hasMoreElements()) {
            RadioButtonMenuItemInternalFrameListener item = (RadioButtonMenuItemInternalFrameListener) items.nextElement();
            if (item != null) {
                openedWindowsButtonGroup.remove(item);
                //windowMenu.remove(item);
            }
        }
    }//GEN-LAST:event_closeAllMenuItemActionPerformed

    private void closeAllButActiveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAllButActiveMenuItemActionPerformed
        if (desktopPane.getSelectedFrame() == null) {
            return;
        }
        String activeTitle = desktopPane.getSelectedFrame().getTitle();
        JInternalFrame[] iFrames = desktopPane.getAllFrames();
        for (int i = 0; i < iFrames.length; i++) {
            if (!activeTitle.equals(iFrames[i].getTitle())) {
                iFrames[i].doDefaultCloseAction();
                //break;
            }
        }
        Enumeration items = openedWindowsButtonGroup.getElements();
        while (items.hasMoreElements()) {
            RadioButtonMenuItemInternalFrameListener item = (RadioButtonMenuItemInternalFrameListener) items.nextElement();
            if (item != null) {
                if (!activeTitle.equals(item.getText())) {
                    openedWindowsButtonGroup.remove(item);
                }
                //windowMenu.remove(item);
            }
        }
    }//GEN-LAST:event_closeAllButActiveMenuItemActionPerformed

    private void maxAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxAllMenuItemActionPerformed
        JInternalFrame[] iFrames = desktopPane.getAllFrames();
        int i = 0;
        try {
            for (i = 0; i < iFrames.length; i++) {
                iFrames[i].setMaximum(true);
            }
        } catch (java.beans.PropertyVetoException pve) {
            //showError("Cannot maximize " + iFrames[i - 1].getTitle(), "Error", pve);
        }
    }//GEN-LAST:event_maxAllMenuItemActionPerformed

    private void minAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minAllMenuItemActionPerformed
        JInternalFrame[] iFrames = desktopPane.getAllFrames();
        int i = 0;
        try {
            for (i = 0; i < iFrames.length; i++) {
                iFrames[i].setIcon(true);
            }
        } catch (java.beans.PropertyVetoException pve) {
            //showError("Cannot minimize " + iFrames[i - 1].getTitle(), "Error", pve);
        }
    }//GEN-LAST:event_minAllMenuItemActionPerformed

    private void tileVerticalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tileVerticalMenuItemActionPerformed
        JInternalFrame[] iFrames = desktopPane.getAllFrames();
        int len = iFrames.length;
        if (len == 0) {
            return;
        }
        java.awt.Rectangle r = desktopPane.getBounds();
        double desktopPaneW = r.getWidth();
        double desktopPaneH = r.getHeight();
        double iFrameH = desktopPaneH / len;
        int h = Double.valueOf(java.lang.Math.floor(iFrameH)).intValue();
        int w = Double.valueOf(java.lang.Math.floor(desktopPaneW)).intValue();
        int i = 0;
        try {
            for (i = 0; i < len; i++) {
                iFrames[i].setMaximum(false);
                iFrames[i].setIcon(false);
                iFrames[i].setBounds(0, i * h, w, h);
            }
        } catch (java.beans.PropertyVetoException pve) {
            //showError("Cannot tile " + iFrames[i - 1].getTitle(), "Error", pve);
        }
    }//GEN-LAST:event_tileVerticalMenuItemActionPerformed

    private void tileHorizontalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tileHorizontalMenuItemActionPerformed
        JInternalFrame[] iFrames = desktopPane.getAllFrames();
        int len = iFrames.length;
        if (len == 0) {
            return;
        }
        java.awt.Rectangle r = desktopPane.getBounds();
        double desktopPaneW = r.getWidth();
        double desktopPaneH = r.getHeight();
        double iFrameW = desktopPaneW / len;
        int w = Double.valueOf(java.lang.Math.floor(iFrameW)).intValue();
        int h = Double.valueOf(java.lang.Math.floor(desktopPaneH)).intValue();
        int i = 0;
        try {
            for (i = 0; i < len; i++) {
                iFrames[i].setMaximum(false);
                iFrames[i].setIcon(false);
                iFrames[i].setBounds(i * w, 0, w, h);
            }
        } catch (java.beans.PropertyVetoException pve) {
            //showError("Cannot tile " + iFrames[i - 1].getTitle(), "Error", pve);
        }
    }//GEN-LAST:event_tileHorizontalMenuItemActionPerformed

    private void cascadeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cascadeMenuItemActionPerformed
        JInternalFrame[] iFrames = desktopPane.getAllFrames();
        int len = iFrames.length;
        if (len == 0) {
            return;
        }
        int offset = 30;
        int i = 0;
        try {
            for (i = 0; i < len; i++) {
                iFrames[i].setMaximum(false);
                iFrames[i].setIcon(false);
                iFrames[i].setSize(400, 300);
                iFrames[i].setLocation(30 * i, 30 * i);
                iFrames[i].toFront();
            }
            iFrames[i - 1].setSelected(true);
        } catch (java.beans.PropertyVetoException pve) {
            //showError("Cannot cascade " + iFrames[i - 1].getTitle(), "Error", pve);
        }
    }//GEN-LAST:event_cascadeMenuItemActionPerformed

    private void editMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_editMenuSelected
        KeyboardFocusManager focusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        Component comp = focusManager.getPermanentFocusOwner();

        if (comp instanceof JTable) {
            if (editMenu.getName() == null || editMenu.getName().equals("textEdit")) {
                editMenu.removeAll();
                JTable table = (JTable) comp;
                editMenu.add(new JMenuItem(new CellCopyAction(table)));
                editMenu.add(new JMenuItem(new CellCutAction(table)));
                editMenu.add(new JMenuItem(new CellPasteAction(table)));
                editMenu.add(new JMenuItem(new SelectAllCellsAction(table)));
                editMenu.setName("tableCellEdit");
            }
        } else if (comp instanceof javax.swing.text.JTextComponent) {
            if (editMenu.getName() == null || editMenu.getName().equals("tableCellEdit")) {
                editMenu.removeAll();
                editMenu.add(new JMenuItem(new CopyAction()));
                editMenu.add(new JMenuItem(new CutAction()));
                editMenu.add(new JMenuItem(new PasteAction()));
                editMenu.add(new JMenuItem(new DeleteAction()));
                editMenu.add(new JMenuItem(new SelectAllAction()));
                editMenu.setName("textEdit");
            }
        } else {
            editMenu.removeAll();
        }
    }//GEN-LAST:event_editMenuSelected

    public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
    }

    public void internalFrameActivated(javax.swing.event.InternalFrameEvent internalFrameEvent) {
    }

    public void internalFrameClosed(javax.swing.event.InternalFrameEvent internalFrameEvent) {
        JInternalFrame[] iFrames = desktopPane.getAllFrames();
        if (iFrames.length == 0) {
            windowMenuSeparator3.setVisible(false);
        }
    }

    public void internalFrameClosing(javax.swing.event.InternalFrameEvent internalFrameEvent) {
    }

    public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent internalFrameEvent) {
    }

    public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent internalFrameEvent) {
    }

    public void internalFrameIconified(javax.swing.event.InternalFrameEvent internalFrameEvent) {
    }

    public void internalFrameOpened(javax.swing.event.InternalFrameEvent internalFrameEvent) {
    }

    public void setStatus(java.lang.String status) {
        this.status.setText(status);
    }

    protected void populateLookAndFeelMenu() {
        /*
        String defaultlaf = Config.getLookAndFeel();

        if (defaultlaf != null){
        if (defaultlaf.equals("CrossPlatformLookAndFeel")){
        defaultlaf = UIManager.getCrossPlatformLookAndFeelClassName();
        }else if (defaultlaf.equals("SystemLookAndFeel")){
        defaultlaf = UIManager.getSystemLookAndFeelClassName();
        }
        //UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        }else{
        defaultlaf = UIManager.getCrossPlatformLookAndFeelClassName();
        }
        if (!isAvailableLookAndFeel(defaultlaf)){
        defaultlaf = UIManager.getCrossPlatformLookAndFeelClassName();
        }

        SortedSet availLookAndFeel = Config.getAvailLookAndFeel();
        log.debug("availLookAndFeel: " + availLookAndFeel);
        availLookAndFeel.remove("SystemLookAndFeel");
        availLookAndFeel.remove("CrossPlatformLookAndFeel");
        availLookAndFeel.add(UIManager.getCrossPlatformLookAndFeelClassName());
        availLookAndFeel.add(UIManager.getSystemLookAndFeelClassName());
        javax.swing.JRadioButtonMenuItem[] laf = new javax.swing.JRadioButtonMenuItem[availLookAndFeel.size()];

        Iterator availLookAndFeelIter = availLookAndFeel.iterator();
        int count = 0;
        while(availLookAndFeelIter.hasNext()){
        String lafName = (String) availLookAndFeelIter.next();

        if (lafName.equals("CrossPlatformLookAndFeel")){
        lafName = UIManager.getCrossPlatformLookAndFeelClassName();
        }else if (lafName.equals("SystemLookAndFeel")){
        lafName = UIManager.getSystemLookAndFeelClassName();
        }

        String lafNameDisplay = lafName.substring(lafName.lastIndexOf('.') + 1);
        lookAndFeelMap.put(lafNameDisplay, lafName);
        if (lafName.equals(defaultlaf)){
        laf[count] = new javax.swing.JRadioButtonMenuItem(lafNameDisplay, true);
        laf[count].addActionListener(lookAndFeelMenuListener);
        }else{
        laf[count] = new javax.swing.JRadioButtonMenuItem(lafNameDisplay, false);
        laf[count].addActionListener(lookAndFeelMenuListener);
        }
        lookAndFeelButtonGroup.add(laf[count]);
        lookAndFeelMenu.add(laf[count]);
        count++;
        }
         */
    }

    /** Example:
     *
     * int x = new Integer(Config.getInstance().getConfigValue("x")).intValue();
     * int y = new Integer(Config.getInstance().getConfigValue("y")).intValue();
     * int w = new Integer(Config.getInstance().getConfigValue("w")).intValue();
     * int h =  new Integer(Config.getInstance().getConfigValue("h")).intValue();
     * this.setBounds(x, y, w, h);
     *
     * java.awt.Dimension screenSize = null;
     * if (w <= 0 || h <= 0){
     * setExtendedState(Frame.MAXIMIZED_BOTH);
     * screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
     * }else{
     * screenSize = new java.awt.Dimension(w, h);
     * }
     *
     * double width = screenSize.getWidth() / 3;
     * int i = new Double(java.lang.Math.floor(width)).intValue();
     * jSplitPane1.setDividerLocation(i);
     * jSplitPane1.setLastDividerLocation(i);
     */
    protected abstract void restoreBounds();

    protected void openInternalFrame(Class clazz, String title) {
        System.out.println("openInternalFrame: " + clazz + " " + title);
        windowMenuSeparator3.setVisible(true);
        //System.setProperty("openedInternalFrameTitle", title); //hack :-(
        CommonInternalFrame iFrame = null;
        RadioButtonMenuItemInternalFrameListener menuItem = new RadioButtonMenuItemInternalFrameListener();
        try {
            iFrame = (CommonInternalFrame) clazz.newInstance();
        } catch (InstantiationException ie) {
            //showError("Error", "Cannot open " + title, ie);
            return;
        } catch (IllegalAccessException iae) {
            //showError("Error", "Cannot open " + title, iae);
            return;
        }

        int itemCount = openedWindowsButtonGroup.getButtonCount();
        if (itemCount == 0) { // no open windows yet
            menuItem.setText(title);
        } else {
            Enumeration items = openedWindowsButtonGroup.getElements();
            String index = null;
            while (items.hasMoreElements()) {
                RadioButtonMenuItemInternalFrameListener item = (RadioButtonMenuItemInternalFrameListener) items.nextElement();
                String itemTitle = item.getText();
                int idx1 = itemTitle.indexOf(title + " (");
                if (idx1 == 0) {
                    index = itemTitle.substring(itemTitle.indexOf("(") + 1, itemTitle.lastIndexOf(")"));
                } else {
                    if (itemTitle.indexOf(title) == 0) {
                        index = "1";
                    }
                }
            }

            if (index != null) {
                int i = Integer.parseInt(index) + 1;
                menuItem.setText(title + " (" + String.valueOf(i) + ")");
            } else {
                menuItem.setText(title);
            }
        }

        iFrame.setTitle(appname + " - " + menuItem.getText());
        iFrame.pack();
        iFrame.show();
        desktopPane.add(iFrame);

        try {
            iFrame.setMaximum(true);
        } catch (java.beans.PropertyVetoException pve) {
            //showError("Error", "Cannot open " + title, pve);
            return;
        }

        try {
            iFrame.setSelected(true);
        } catch (java.beans.PropertyVetoException pve) {
            //showError("Error", "Cannot open " + title, pve);
            return;
        }

        windowMenu.add(menuItem);
        openedWindowsButtonGroup.add(menuItem);
        menuItem.setSelected(true);

        menuItem.addActionListener(iFrame);
        iFrame.addInternalFrameListener(menuItem);
        //closeAllMenuItem.addActionListener(iFrame);

        iFrame.setParentFrame(this);
        iFrame.addInternalFrameListener(this);

        setStatus("Ready");
    }

    protected abstract void configChanged(java.awt.event.ActionEvent evt);
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JMenuItem aboutMenuItem;
    protected javax.swing.JMenuItem cascadeMenuItem;
    protected javax.swing.JMenuItem closeAllButActiveMenuItem;
    protected javax.swing.JMenuItem closeAllMenuItem;
    protected javax.swing.JMenuItem configMenuItem;
    protected javax.swing.JMenuItem contentMenuItem;
    protected javax.swing.JDesktopPane desktopPane;
    protected javax.swing.JMenu editMenu;
    protected javax.swing.JMenuItem exitMenuItem;
    protected javax.swing.JMenu fileMenu;
    protected javax.swing.JMenu helpMenu;
    protected javax.swing.JMenu lookAndFeelMenu;
    protected javax.swing.JMenuItem maxAllMenuItem;
    protected javax.swing.JMenuBar menuBar;
    protected javax.swing.JMenuItem minAllMenuItem;
    protected javax.swing.JMenu openMenu;
    protected javax.swing.ButtonGroup openedWindowsButtonGroup;
    protected javax.swing.JMenuItem saveAsMenuItem;
    protected javax.swing.JMenuItem saveMenuItem;
    protected javax.swing.JLabel status;
    protected javax.swing.JMenuItem tileHorizontalMenuItem;
    protected javax.swing.JMenuItem tileVerticalMenuItem;
    protected javax.swing.JMenu toolsMenu;
    protected javax.swing.JMenu windowMenu;
    protected javax.swing.JSeparator windowMenuSeparator1;
    protected javax.swing.JSeparator windowMenuSeparator2;
    protected javax.swing.JSeparator windowMenuSeparator3;
    // End of variables declaration//GEN-END:variables
    protected ConfigurationEditorFrame confEditorFrame;
    protected String appname = "CHANGE IT";
}
